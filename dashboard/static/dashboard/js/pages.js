// Pages Management JavaScript

class PagesManager {
    constructor() {
        this.currentPage = 1;
        this.currentTab = 'pages';
        this.selectedPages = new Set();
        this.selectedComments = new Set();
        this.init();
    }

    init() {
        this.loadStatistics();
        this.loadPages();
        this.loadCategories();
        this.setupEventListeners();
        this.setupAutoSlugGeneration();
    }

    setupEventListeners() {
        // Search and filter events
        document.getElementById('pages-search').addEventListener('input', debounce(() => this.loadPages(), 300));
        document.getElementById('pages-status-filter').addEventListener('change', () => this.loadPages());
        document.getElementById('pages-category-filter').addEventListener('change', () => this.loadPages());
        
        document.getElementById('categories-search').addEventListener('input', debounce(() => this.loadCategories(), 300));
        document.getElementById('comments-search').addEventListener('input', debounce(() => this.loadComments(), 300));
        document.getElementById('comments-status-filter').addEventListener('change', () => this.loadComments());

        // Select all checkboxes
        document.getElementById('select-all-pages').addEventListener('change', (e) => {
            this.selectAllPages(e.target.checked);
        });
        
        document.getElementById('select-all-comments').addEventListener('change', (e) => {
            this.selectAllComments(e.target.checked);
        });
    }

    setupAutoSlugGeneration() {
        const titleInput = document.getElementById('page-title');
        const slugInput = document.getElementById('page-slug');
        
        titleInput.addEventListener('input', () => {
            if (!slugInput.value || slugInput.dataset.autoGenerated === 'true') {
                const slug = this.generateSlug(titleInput.value);
                slugInput.value = slug;
                slugInput.dataset.autoGenerated = 'true';
            }
        });
        
        slugInput.addEventListener('input', () => {
            slugInput.dataset.autoGenerated = 'false';
        });

        // Category name to slug
        const categoryNameInput = document.getElementById('category-name');
        const categorySlugInput = document.getElementById('category-slug');
        
        categoryNameInput.addEventListener('input', () => {
            if (!categorySlugInput.value || categorySlugInput.dataset.autoGenerated === 'true') {
                const slug = this.generateSlug(categoryNameInput.value);
                categorySlugInput.value = slug;
                categorySlugInput.dataset.autoGenerated = 'true';
            }
        });
    }

    generateSlug(text) {
        return text
            .toLowerCase()
            .trim()
            .replace(/[\s\W-]+/g, '-')
            .replace(/^-+|-+$/g, '');
    }

    switchTab(tabName) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // Show selected tab
        document.getElementById(`${tabName}-tab`).classList.add('active');
        event.target.classList.add('active');
        
        this.currentTab = tabName;
        
        // Load data for the selected tab
        switch(tabName) {
            case 'pages':
                this.loadPages();
                break;
            case 'categories':
                this.loadCategories();
                break;
            case 'comments':
                this.loadComments();
                break;
            case 'analytics':
                this.loadAnalytics();
                break;
        }
    }

    async loadStatistics() {
        try {
            const response = await fetch('/mb-admin/api/pages/pages/statistics/');
            const data = await response.json();
            
            document.getElementById('total-pages').textContent = data.total_pages || 0;
            document.getElementById('published-pages').textContent = data.published_pages || 0;
            document.getElementById('draft-pages').textContent = data.draft_pages || 0;
            document.getElementById('total-views').textContent = data.total_views || 0;
        } catch (error) {
            console.error('Error loading statistics:', error);
        }
    }

    async loadPages(page = 1) {
        try {
            const search = document.getElementById('pages-search').value;
            const status = document.getElementById('pages-status-filter').value;
            const category = document.getElementById('pages-category-filter').value;
            
            const params = new URLSearchParams({
                page: page,
                search: search,
                status: status,
                category: category
            });
            
            const response = await fetch(`/mb-admin/api/pages/pages/?${params}`);
            const data = await response.json();
            
            this.renderPagesTable(data.results);
            this.renderPagination('pages-pagination', data, page => this.loadPages(page));
            
            // Initialize tooltips for the new content
            this.initializeTooltips();
            
        } catch (error) {
            console.error('Error loading pages:', error);
            showAlert('Error loading pages', 'error');
        }
    }

    renderPagesTable(pages) {
        const tbody = document.getElementById('pages-table-body');
        tbody.innerHTML = '';
        
        pages.forEach(page => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>
                    <input type="checkbox" class="page-checkbox" value="${page.id}" 
                           onchange="pagesManager.togglePageSelection(${page.id}, this.checked)">
                </td>
                <td>
                    <div>
                        <a href="/page/${page.slug}/" target="_blank" class="text-decoration-none" 
                           title="Click to view page in new tab" data-bs-toggle="tooltip">
                            <strong class="text-primary">${page.title}</strong>
                            <i class="fas fa-external-link-alt ms-1" style="font-size: 0.8em; color: #6c757d;"></i>
                        </a>
                        ${page.is_featured ? '<span class="badge bg-primary ms-1">Featured</span>' : ''}
                        ${page.show_in_menu ? '<span class="badge bg-info ms-1">Menu</span>' : ''}
                    </div>
                    <small class="text-muted">${page.slug}</small>
                </td>
                <td>
                    <span class="page-status-badge status-${page.status}">${page.status}</span>
                </td>
                <td>${page.category ? page.category.name : '-'}</td>
                <td>${page.author.username}</td>
                <td>${page.view_count}</td>
                <td>${formatDate(page.updated_at)}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="pagesManager.editPage(${page.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="pagesManager.duplicatePage(${page.id})">
                            <i class="fas fa-copy"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="pagesManager.togglePublishPage(${page.id})">
                            <i class="fas fa-${page.status === 'published' ? 'eye-slash' : 'eye'}"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="pagesManager.deletePage(${page.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    togglePageSelection(pageId, selected) {
        if (selected) {
            this.selectedPages.add(pageId);
        } else {
            this.selectedPages.delete(pageId);
        }
    }

    initializeTooltips() {
        // Initialize Bootstrap tooltips for dynamically loaded content
        if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            tooltipTriggerList.forEach(tooltipTriggerEl => {
                // Dispose existing tooltip if any
                const existingTooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                if (existingTooltip) {
                    existingTooltip.dispose();
                }
                // Create new tooltip
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }
    }

    selectAllPages(selectAll) {
        const checkboxes = document.querySelectorAll('.page-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll;
            this.togglePageSelection(parseInt(checkbox.value), selectAll);
        });
    }

    async loadCategories() {
        try {
            const search = document.getElementById('categories-search').value;
            const params = new URLSearchParams({ search: search });
            
            const response = await fetch(`/mb-admin/api/pages/categories/?${params}`);
            const data = await response.json();
            
            this.renderCategoriesTable(data.results);
            this.updateCategoryDropdowns(data.results);
            
        } catch (error) {
            console.error('Error loading categories:', error);
        }
    }

    renderCategoriesTable(categories) {
        const tbody = document.getElementById('categories-table-body');
        tbody.innerHTML = '';
        
        categories.forEach(category => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><strong>${category.name}</strong></td>
                <td><code>${category.slug}</code></td>
                <td>${category.pages_count || 0}</td>
                <td>
                    <span class="badge bg-${category.is_active ? 'success' : 'secondary'}">
                        ${category.is_active ? 'Active' : 'Inactive'}
                    </span>
                </td>
                <td>${formatDate(category.created_at)}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="pagesManager.editCategory(${category.id})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="pagesManager.deleteCategory(${category.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    updateCategoryDropdowns(categories) {
        const dropdowns = ['page-category', 'pages-category-filter'];
        
        dropdowns.forEach(dropdownId => {
            const dropdown = document.getElementById(dropdownId);
            const currentValue = dropdown.value;
            
            // Clear existing options (except first one for filters)
            if (dropdownId.includes('filter')) {
                dropdown.innerHTML = '<option value="">All Categories</option>';
            } else {
                dropdown.innerHTML = '<option value="">Select Category</option>';
            }
            
            // Add category options
            categories.forEach(category => {
                if (category.is_active) {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    dropdown.appendChild(option);
                }
            });
            
            // Restore previous value
            dropdown.value = currentValue;
        });
    }

    async loadComments() {
        try {
            const search = document.getElementById('comments-search').value;
            const status = document.getElementById('comments-status-filter').value;
            
            const params = new URLSearchParams({
                search: search,
                is_approved: status === 'approved' ? 'true' : status === 'pending' ? 'false' : ''
            });
            
            const response = await fetch(`/mb-admin/api/pages/comments/?${params}`);
            const data = await response.json();
            
            this.renderCommentsTable(data.results);
            
        } catch (error) {
            console.error('Error loading comments:', error);
        }
    }

    renderCommentsTable(comments) {
        const tbody = document.getElementById('comments-table-body');
        tbody.innerHTML = '';
        
        comments.forEach(comment => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>
                    <input type="checkbox" class="comment-checkbox" value="${comment.id}" 
                           onchange="pagesManager.toggleCommentSelection(${comment.id}, this.checked)">
                </td>
                <td><strong>${comment.page ? comment.page.title : 'Unknown'}</strong></td>
                <td>${comment.author.username}</td>
                <td>${comment.content.substring(0, 100)}${comment.content.length > 100 ? '...' : ''}</td>
                <td>
                    <span class="badge bg-${comment.is_approved ? 'success' : 'warning'}">
                        ${comment.is_approved ? 'Approved' : 'Pending'}
                    </span>
                </td>
                <td>${formatDate(comment.created_at)}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-${comment.is_approved ? 'warning' : 'success'}" 
                                onclick="pagesManager.toggleCommentApproval(${comment.id})">
                            <i class="fas fa-${comment.is_approved ? 'times' : 'check'}"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="pagesManager.deleteComment(${comment.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    toggleCommentSelection(commentId, selected) {
        if (selected) {
            this.selectedComments.add(commentId);
        } else {
            this.selectedComments.delete(commentId);
        }
    }

    selectAllComments(selectAll) {
        const checkboxes = document.querySelectorAll('.comment-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAll;
            this.toggleCommentSelection(parseInt(checkbox.value), selectAll);
        });
    }

    async loadAnalytics() {
        try {
            const dateFrom = document.getElementById('analytics-date-from').value;
            const dateTo = document.getElementById('analytics-date-to').value;
            
            const params = new URLSearchParams();
            if (dateFrom) params.append('date_from', dateFrom);
            if (dateTo) params.append('date_to', dateTo);
            
            const response = await fetch(`/mb-admin/api/pages/analytics/summary/?${params}`);
            const data = await response.json();
            
            document.getElementById('analytics-total-views').textContent = data.total_views || 0;
            document.getElementById('analytics-unique-views').textContent = data.total_unique_views || 0;
            document.getElementById('analytics-bounce-rate').textContent = `${data.average_bounce_rate || 0}%`;
            document.getElementById('analytics-top-pages-count').textContent = data.top_pages ? data.top_pages.length : 0;
            
            this.renderTopPages(data.top_pages || []);
            
        } catch (error) {
            console.error('Error loading analytics:', error);
        }
    }

    renderTopPages(topPages) {
        const tbody = document.getElementById('top-pages-table-body');
        tbody.innerHTML = '';
        
        topPages.forEach(page => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><strong>${page.page}</strong></td>
                <td>${page.views}</td>
                <td>${page.unique_views}</td>
            `;
            tbody.appendChild(row);
        });
    }

    showCreatePageModal() {
        this.resetPageForm();
        document.getElementById('pageModalTitle').textContent = 'Create New Page';
        delete document.getElementById('pageForm').dataset.pageId;
        new bootstrap.Modal(document.getElementById('pageModal')).show();
    }

    async editPage(pageId) {
        try {
            const response = await fetch(`/mb-admin/api/pages/pages/${pageId}/`);
            const pageData = await response.json();
            
            if (response.ok) {
                this.populatePageForm(pageData);
                document.getElementById('pageModalTitle').textContent = 'Edit Page';
                document.getElementById('pageForm').dataset.pageId = pageId;
                new bootstrap.Modal(document.getElementById('pageModal')).show();
            } else {
                showAlert('Error loading page data', 'error');
            }
        } catch (error) {
            console.error('Error loading page:', error);
            showAlert('Error loading page data', 'error');
        }
    }

    populatePageForm(pageData) {
        document.getElementById('page-title').value = pageData.title || '';
        document.getElementById('page-slug').value = pageData.slug || '';
        document.getElementById('page-excerpt').value = pageData.excerpt || '';
        document.getElementById('page-content').value = pageData.content || '';
        document.getElementById('page-status').value = pageData.status || 'draft';
        document.getElementById('page-category').value = pageData.category?.id || '';
        document.getElementById('page-publish-date').value = pageData.publish_date ? 
            new Date(pageData.publish_date).toISOString().slice(0, 16) : '';
        document.getElementById('page-featured').checked = pageData.is_featured || false;
        document.getElementById('page-show-menu').checked = pageData.show_in_menu || false;
        document.getElementById('page-allow-comments').checked = pageData.allow_comments || false;
        document.getElementById('page-require-login').checked = pageData.require_login || false;
        document.getElementById('page-menu-order').value = pageData.menu_order || 0;
        document.getElementById('page-meta-title').value = pageData.meta_title || '';
        document.getElementById('page-meta-description').value = pageData.meta_description || '';
        document.getElementById('page-meta-keywords').value = pageData.meta_keywords || '';
    }

    async deletePage(pageId) {
        if (!confirm('Are you sure you want to delete this page?')) {
            return;
        }

        try {
            const response = await fetch(`/mb-admin/api/pages/pages/${pageId}/`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': getCsrfToken()
                }
            });

            if (response.ok) {
                showAlert('Page deleted successfully', 'success');
                this.loadPages();
                this.loadStatistics();
            } else {
                showAlert('Error deleting page', 'error');
            }
        } catch (error) {
            console.error('Error deleting page:', error);
            showAlert('Error deleting page', 'error');
        }
    }

    showCreateCategoryModal() {
        this.resetCategoryForm();
        delete document.getElementById('categoryForm').dataset.categoryId;
        new bootstrap.Modal(document.getElementById('categoryModal')).show();
    }

    async editCategory(categoryId) {
        try {
            const response = await fetch(`/mb-admin/api/pages/categories/${categoryId}/`);
            const categoryData = await response.json();
            
            if (response.ok) {
                this.populateCategoryForm(categoryData);
                document.getElementById('categoryForm').dataset.categoryId = categoryId;
                new bootstrap.Modal(document.getElementById('categoryModal')).show();
            } else {
                showAlert('Error loading category data', 'error');
            }
        } catch (error) {
            console.error('Error loading category:', error);
            showAlert('Error loading category data', 'error');
        }
    }

    populateCategoryForm(categoryData) {
        document.getElementById('category-name').value = categoryData.name || '';
        document.getElementById('category-slug').value = categoryData.slug || '';
        document.getElementById('category-description').value = categoryData.description || '';
        document.getElementById('category-active').checked = categoryData.is_active !== false;
    }

    async deleteCategory(categoryId) {
        if (!confirm('Are you sure you want to delete this category?')) {
            return;
        }

        try {
            const response = await fetch(`/mb-admin/api/pages/categories/${categoryId}/`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': getCsrfToken()
                }
            });

            if (response.ok) {
                showAlert('Category deleted successfully', 'success');
                this.loadCategories();
            } else {
                showAlert('Error deleting category', 'error');
            }
        } catch (error) {
            console.error('Error deleting category:', error);
            showAlert('Error deleting category', 'error');
        }
    }

    async deleteComment(commentId) {
        if (!confirm('Are you sure you want to delete this comment?')) {
            return;
        }

        try {
            const response = await fetch(`/mb-admin/api/pages/comments/${commentId}/`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': getCsrfToken()
                }
            });

            if (response.ok) {
                showAlert('Comment deleted successfully', 'success');
                this.loadComments();
            } else {
                showAlert('Error deleting comment', 'error');
            }
        } catch (error) {
            console.error('Error deleting comment:', error);
            showAlert('Error deleting comment', 'error');
        }
    }

    resetPageForm() {
        document.getElementById('pageForm').reset();
        document.getElementById('page-publish-date').value = new Date().toISOString().slice(0, 16);
        document.getElementById('page-slug').dataset.autoGenerated = 'true';
    }

    resetCategoryForm() {
        document.getElementById('categoryForm').reset();
        document.getElementById('category-slug').dataset.autoGenerated = 'true';
    }

    async savePage() {
        try {
            const formData = this.getPageFormData();
            const pageId = document.getElementById('pageForm').dataset.pageId;
            const isEdit = !!pageId;
            
            const url = isEdit ? `/mb-admin/api/pages/pages/${pageId}/` : '/mb-admin/api/pages/pages/';
            const method = isEdit ? 'PUT' : 'POST';
            
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify(formData)
            });
            
            if (response.ok) {
                const message = isEdit ? 'Page updated successfully' : 'Page created successfully';
                showAlert(message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('pageModal')).hide();
                this.loadPages();
                this.loadStatistics();
            } else {
                const errorData = await response.json();
                showAlert('Error saving page: ' + JSON.stringify(errorData), 'error');
            }
        } catch (error) {
            console.error('Error saving page:', error);
            showAlert('Error saving page', 'error');
        }
    }

    async saveCategory() {
        try {
            const formData = this.getCategoryFormData();
            const categoryId = document.getElementById('categoryForm').dataset.categoryId;
            const isEdit = !!categoryId;
            
            const url = isEdit ? `/mb-admin/api/pages/categories/${categoryId}/` : '/mb-admin/api/pages/categories/';
            const method = isEdit ? 'PUT' : 'POST';
            
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify(formData)
            });
            
            if (response.ok) {
                const message = isEdit ? 'Category updated successfully' : 'Category created successfully';
                showAlert(message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('categoryModal')).hide();
                this.loadCategories();
            } else {
                const errorData = await response.json();
                showAlert('Error saving category: ' + JSON.stringify(errorData), 'error');
            }
        } catch (error) {
            console.error('Error saving category:', error);
            showAlert('Error saving category', 'error');
        }
    }

    getPageFormData() {
        return {
            title: document.getElementById('page-title').value,
            slug: document.getElementById('page-slug').value,
            excerpt: document.getElementById('page-excerpt').value,
            content: document.getElementById('page-content').value,
            status: document.getElementById('page-status').value,
            category_id: document.getElementById('page-category').value || null,
            publish_date: document.getElementById('page-publish-date').value,
            is_featured: document.getElementById('page-featured').checked,
            show_in_menu: document.getElementById('page-show-menu').checked,
            allow_comments: document.getElementById('page-allow-comments').checked,
            require_login: document.getElementById('page-require-login').checked,
            menu_order: parseInt(document.getElementById('page-menu-order').value) || 0,
            meta_title: document.getElementById('page-meta-title').value,
            meta_description: document.getElementById('page-meta-description').value,
            meta_keywords: document.getElementById('page-meta-keywords').value
        };
    }

    getCategoryFormData() {
        return {
            name: document.getElementById('category-name').value,
            slug: document.getElementById('category-slug').value,
            description: document.getElementById('category-description').value,
            is_active: document.getElementById('category-active').checked
        };
    }

    async duplicatePage(pageId) {
        try {
            const response = await fetch(`/mb-admin/api/pages/pages/${pageId}/duplicate/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCsrfToken()
                }
            });
            
            if (response.ok) {
                showAlert('Page duplicated successfully', 'success');
                this.loadPages();
            } else {
                showAlert('Error duplicating page', 'error');
            }
        } catch (error) {
            console.error('Error duplicating page:', error);
            showAlert('Error duplicating page', 'error');
        }
    }

    async togglePublishPage(pageId) {
        try {
            const response = await fetch(`/mb-admin/api/pages/pages/${pageId}/quick_publish/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCsrfToken()
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                showAlert(data.detail, 'success');
                this.loadPages();
            } else {
                showAlert('Error updating page status', 'error');
            }
        } catch (error) {
            console.error('Error updating page status:', error);
            showAlert('Error updating page status', 'error');
        }
    }

    async toggleCommentApproval(commentId) {
        try {
            const response = await fetch(`/mb-admin/api/pages/comments/${commentId}/approve/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCsrfToken()
                }
            });
            
            if (response.ok) {
                showAlert('Comment status updated', 'success');
                this.loadComments();
            } else {
                showAlert('Error updating comment status', 'error');
            }
        } catch (error) {
            console.error('Error updating comment status:', error);
            showAlert('Error updating comment status', 'error');
        }
    }

    // Bulk actions
    async bulkPublishPages() {
        if (this.selectedPages.size === 0) {
            showAlert('Please select pages to publish', 'warning');
            return;
        }

        try {
            const response = await fetch('/mb-admin/api/pages/pages/bulk_action/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify({
                    page_ids: Array.from(this.selectedPages),
                    action: 'publish'
                })
            });

            if (response.ok) {
                const data = await response.json();
                showAlert(data.detail, 'success');
                this.selectedPages.clear();
                this.loadPages();
            } else {
                showAlert('Error publishing pages', 'error');
            }
        } catch (error) {
            console.error('Error publishing pages:', error);
            showAlert('Error publishing pages', 'error');
        }
    }

    async bulkUnpublishPages() {
        if (this.selectedPages.size === 0) {
            showAlert('Please select pages to unpublish', 'warning');
            return;
        }

        try {
            const response = await fetch('/mb-admin/api/pages/pages/bulk_action/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify({
                    page_ids: Array.from(this.selectedPages),
                    action: 'unpublish'
                })
            });

            if (response.ok) {
                const data = await response.json();
                showAlert(data.detail, 'success');
                this.selectedPages.clear();
                this.loadPages();
            } else {
                showAlert('Error unpublishing pages', 'error');
            }
        } catch (error) {
            console.error('Error unpublishing pages:', error);
            showAlert('Error unpublishing pages', 'error');
        }
    }

    async bulkDeletePages() {
        if (this.selectedPages.size === 0) {
            showAlert('Please select pages to delete', 'warning');
            return;
        }

        if (!confirm(`Are you sure you want to delete ${this.selectedPages.size} page(s)?`)) {
            return;
        }

        try {
            const response = await fetch('/mb-admin/api/pages/pages/bulk_action/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify({
                    page_ids: Array.from(this.selectedPages),
                    action: 'delete'
                })
            });

            if (response.ok) {
                const data = await response.json();
                showAlert(data.detail, 'success');
                this.selectedPages.clear();
                this.loadPages();
            } else {
                showAlert('Error deleting pages', 'error');
            }
        } catch (error) {
            console.error('Error deleting pages:', error);
            showAlert('Error deleting pages', 'error');
        }
    }

    async bulkApproveComments() {
        try {
            const response = await fetch('/mb-admin/api/pages/comments/bulk_approve/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify({
                    comment_ids: Array.from(this.selectedComments)
                })
            });

            if (response.ok) {
                const data = await response.json();
                showAlert(data.detail, 'success');
                this.selectedComments.clear();
                this.loadComments();
            } else {
                showAlert('Error approving comments', 'error');
            }
        } catch (error) {
            console.error('Error approving comments:', error);
            showAlert('Error approving comments', 'error');
        }
    }

    async bulkUnapproveComments() {
        try {
            const response = await fetch('/mb-admin/api/pages/comments/bulk_unapprove/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                },
                body: JSON.stringify({
                    comment_ids: Array.from(this.selectedComments)
                })
            });

            if (response.ok) {
                const data = await response.json();
                showAlert(data.detail, 'success');
                this.selectedComments.clear();
                this.loadComments();
            } else {
                showAlert('Error unapproving comments', 'error');
            }
        } catch (error) {
            console.error('Error unapproving comments:', error);
            showAlert('Error unapproving comments', 'error');
        }
    }

    renderPagination(containerId, data, onPageClick) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';

        if (!data.next && !data.previous) return;

        const nav = document.createElement('nav');
        const ul = document.createElement('ul');
        ul.className = 'pagination';

        // Previous button
        if (data.previous) {
            const li = document.createElement('li');
            li.className = 'page-item';
            li.innerHTML = `<a class="page-link" href="#">Previous</a>`;
            li.addEventListener('click', (e) => {
                e.preventDefault();
                const page = new URL(data.previous).searchParams.get('page') || 1;
                onPageClick(parseInt(page));
            });
            ul.appendChild(li);
        }

        // Next button
        if (data.next) {
            const li = document.createElement('li');
            li.className = 'page-item';
            li.innerHTML = `<a class="page-link" href="#">Next</a>`;
            li.addEventListener('click', (e) => {
                e.preventDefault();
                const page = new URL(data.next).searchParams.get('page') || 1;
                onPageClick(parseInt(page));
            });
            ul.appendChild(li);
        }

        nav.appendChild(ul);
        container.appendChild(nav);
    }
}

// Utility functions
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
}

function getCsrfToken() {
    // Try to get CSRF token from various sources
    let token = document.querySelector('[name=csrfmiddlewaretoken]')?.value;
    if (!token) {
        token = document.querySelector('meta[name="csrf-token"]')?.content;
    }
    if (!token) {
        // Try to get from cookies
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [name, value] = cookie.trim().split('=');
            if (name === 'csrftoken') {
                token = value;
                break;
            }
        }
    }
    return token;
}

function showAlert(message, type) {
    // Create alert element
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// Global functions for onclick handlers
function switchTab(tabName) {
    pagesManager.switchTab(tabName);
}

function showCreatePageModal() {
    pagesManager.showCreatePageModal();
}

function showCreateCategoryModal() {
    pagesManager.showCreateCategoryModal();
}

function savePage() {
    pagesManager.savePage();
}

function saveCategory() {
    pagesManager.saveCategory();
}

function bulkPublishPages() {
    pagesManager.bulkPublishPages();
}

function bulkUnpublishPages() {
    pagesManager.bulkUnpublishPages();
}

function bulkDeletePages() {
    pagesManager.bulkDeletePages();
}

function bulkApproveComments() {
    if (pagesManager.selectedComments.size === 0) {
        showAlert('Please select comments to approve', 'warning');
        return;
    }
    
    pagesManager.bulkApproveComments();
}

function bulkUnapproveComments() {
    if (pagesManager.selectedComments.size === 0) {
        showAlert('Please select comments to unapprove', 'warning');
        return;
    }
    
    pagesManager.bulkUnapproveComments();
}

function loadAnalytics() {
    pagesManager.loadAnalytics();
}

// Additional global functions for edit and delete operations
function editPage(pageId) {
    pagesManager.editPage(pageId);
}

function deletePage(pageId) {
    pagesManager.deletePage(pageId);
}

function editCategory(categoryId) {
    pagesManager.editCategory(categoryId);
}

function deleteCategory(categoryId) {
    pagesManager.deleteCategory(categoryId);
}

function deleteComment(commentId) {
    pagesManager.deleteComment(commentId);
}

// Initialize when DOM is loaded
let pagesManager;
document.addEventListener('DOMContentLoaded', function() {
    pagesManager = new PagesManager();
});